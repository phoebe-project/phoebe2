<chapter xml:id="identifiers">
<title> Working with Identifiers </title>

Very often (if not always), working with actual numbers and literals is not enough to get the job done. Typical scripts are not written to be run only once, so their dependence on actual numbers is not desired. Computing 5!, for example, could indeed be done by multiplying 5 * 4 * 3 * 2 * 1, but it would be more practical to create a small script that does the computation for any given value. This is where <emphasis>identifiers</emphasis> come to play. Identifiers are sequences of one or more characters that uniquely identify a <emphasis>parameter</emphasis> or a <emphasis>variable</emphasis>.

<sect1>
<title> Parameters </title>

Parameters are a special type of identifiers that determine all aspects of the eclipsing binary model. These are, for example, the semi-major axis, the inclination, a set of morphological constraints for the given binary etc. PHOEBE uses <emphasis>qualifiers</emphasis> to uniquely identify all such parameters. All qualifiers are predefined, the complete list along with exact naming specification is given in the <xref linkend="qualifiers"/>.

</sect1>

<sect1>
<title> Variables </title>

Variables are user-defined identifiers that stand for a value. For example, in the expression <varname>a = 3 + b</varname>, <varname>a</varname> and <varname>b</varname> are variables. In the expression above, number <varname>3</varname> is a constant. Every variable has a unique name and a corresponding data type that indicates what sort of value the variable represents, i.e. whether it is an integer, a floating-point number, a string etc.

<sect2>
<title> Types of variables </title>

PHOEBE scripting language defines and uses the following basic types of variables:

<variablelist>
<varlistentry>
<term>Integers.</term>
<listitem> This numerical type is composed of one or more digits (0 through 9). Any leading zeroes are discarded by the parser. Examples of integers are <varname>1</varname>, <varname>-204</varname>, etc. The value span for integers is determined by the computer and is usually <varname>+/-2147483647</varname>. </listitem>
</varlistentry>
<varlistentry> <term>Booleans.</term>
<listitem> Expressions that may be true or false. PHOEBE defines two reserved keywords <varname>TRUE</varname> and <varname>FALSE</varname> (with aliases <varname>YES</varname> and <varname>NO</varname>) that are used for boolean arithmetics. </listitem>
</varlistentry>
<varlistentry> <term>Floating point numbers.</term>
<listitem> This numeric type is composed of one or more leading digits followed by a decimal point ('.') and zero or more trailing digits, i.e. <varname>12.5</varname>, <varname>2.</varname>, <varname>0.21</varname>. The leading digit is always required; <varname>.2</varname> is not valid. Floating point numbers may also be given in exponential form using <varname>e</varname> or <varname>E</varname> characters, i.e. <varname>1.3E-3</varname> stands for 1.3тип10<superscript>-3</superscript>, <varname>0.3e+2</varname> for 0.3тип10<superscript>2</superscript>, etc. The accuracy of arithmetic operations on floating point numbers conforms to double IEEE standard, which means precision is at least 10<superscript>-12</superscript> for a single operation. </listitem>
</varlistentry>
<varlistentry> <term>Strings.</term>
<listitem> This non-numeric type, enclosed in double quotes, is composed of the arbitrary number of alpha-numeric characters (a through z, A through Z, 0 through 9), a dash (-), an underscore (_) or a white-space. A backslash character '\' is used to obtain special characters such as newlines (\n), tabs (\t), quotes (\"), etc. For example, <varname>"This is a string."</varname> </listitem>
</varlistentry>
<varlistentry> <term>Arrays.</term>
<listitem>
All basic types listed above can also be stacked in arrays. These may have arbitrary dimensions, but all elements must be of the same type. Array elements are enclosed in curly braces and separated with a comma, i.e. <varname>{1,2,3}</varname> and <varname>{"one", "two", "three"}</varname>.
</listitem>
</varlistentry>
</variablelist>

<para>
There are several read-only constructs with predefined fields. These fields cannot be constructed or modified by the user; they have a fixed layout and content that is set by the structure itself. For example, minimization algorithms return a structure containing a list of chi-squared values for each passband, a weighted cost function of the whole fit, original and corrected parameter values etc. We shall introduce these structured types when discussing the respective commands that return them.
</para>
</sect2>

</sect1>

</chapter>
