<chapter xml:id="general_properties">
<title> General Properties </title>

<para>
PHOEBE scripting language is an interpreted language. This means that scripts need not be compiled before their execution, they are evaluated on the fly. Built-in PHOEBE commands, on the other hand, are compiled, which assures maximum computational speed.
</para>

<para>
We start the overview of the scripter with few general remarks and term definitions of the scripting language itself.
</para>

<itemizedlist>
<listitem> A statement is the smallest self-contained interpretable piece of input. It begins with a directive or a command and is followed by zero, one or more arguments. Arguments to directives are passed without any delimeters, while arguments to commands are enclosed in parentheses '(', ')'. </listitem>
<listitem> A block of statements is a chunk of input that is delimited by curly braces '{', '}'. It is evaluated as a whole rather than on statement-by-statement basis. Blocks may contain sub-blocks, they may be parts of loops, macro definitions or conditional statements. They may also be stand-alone, to achieve segmented evaluation. </listitem>
<listitem> A script is a set of statements. Script flow is linear (there are no unconditional jumps, i.e. goto statements) and is interpreted left-to-right, top-to-bottom. </listitem>
<listitem> A script unit is a self-contained interpretable block with a void or non-void result. There are 2 script units in PHOEBE: macros, which don't return any value, and functions, which do return a value. </listitem>
<listitem> An input is a script or a set of scripts that is read in either interactively from the terminal or from an external file. If the input is interactive, statements are evaluated one at a time. If it is read from an external file, the input is evaluated as a whole. </listitem>
<listitem> A comment in the input is denoted by the # character. Everything beyond it until the end of line is discarded. </listitem>
<listitem> A shell command is an external command that is executed by the system shell. Shell commands are invoked with the escape character '!'. </listitem>
</itemizedlist>

<sect1>
<title> PHOEBE invocation </title>

Once PHOEBE scripter is properly compiled and installed, it is ready to be run. Mode of operation is determined by command-line switches and arguments. All switches and arguments are optional and order-insensitive. The table below lists supported arguments. Scripter invocation synopsis is:

<synopsis>phoebe-scripter [-chv] [-e name.script] [paramfile.phoebe]</synopsis>

<table xml:id="phoebe_arguments">
<thead>
  <tr>
    <td>Switch:</td>
    <td>Mode of operation:</td>
  </tr>
</thead>
<tbody>
  <tr>
    <td>no switch</td>
    <td>runs PHOEBE in interactive scripter mode</td>
  </tr>
  <tr>
    <td>-c, --configure</td>
    <td>runs a text-based PHOEBE configurator</td>
  </tr>
  <tr>
    <td>-h, --help</td>
    <td>displays a concise help screen and exits</td>
  </tr>
  <tr>
    <td>-v, --version</td>
    <td>displays PHOEBE version and exits</td>
  </tr>
  <tr>
    <td>-e, --execute</td>
    <td>executes the script name.script and exits</td>
  </tr>
  <tr>
    <td>--config-dir dir/</td>
    <td>uses dir/ to look for PHOEBE configuration file</td>
  </tr>
</tbody>
</table>

</sect1>

<sect1>
<title> Input Files </title>

The input consists of alpha-numerical characters ('a' through 'z', 'A' through 'Z', '0' through '9'), punctuations ('.', ',', '_'), operators ('+', '-', '*', '/', '^', '&lt;', '&gt;', '='), braces ('{', '}'), parentheses ('(', ')', '[', ']'), comments ('#') and quotes (''', '"'). It may contain an arbitrary number of whitespaces (spaces, tabs and newlines). All other ASCII characters may be used only in literals (enclosed in quotes) and comments (preceeded by '#').

</sect1>

<sect1>
<title> Formatting Rules </title>

PHOEBE scripter may be used in two ways: interactively or by executing external scripts. The script formatting rules are very flexible and they do not require any position-dependent formatting. However, since interactive mode evaluates statements on a line-by-line basis, several context-dependent formatting rules apply. External scripts are evaluated as a whole and there are thus no formatting restrictions of any kind.

<sect2>
<title> External Scripts </title>

External scripts are evaluated as a whole, so no formatting restrictions apply. Input file format is very flexible - it is up to the user to choose the layout of a script. Since the scripter is insensitive to whitespaces, it does not matter whether a single line corresponds to a single statement or to more statements. The following snippet:

<programlisting>
      print "Entering a loop."
      for (i = 1; i &lt;= 5; i++) {
        print "Iteration no. ", i
      }
</programlisting>

is equivalent to:

<programlisting>
      print "Entering a loop." for (i = 1; i &lt;= 5; i++) {
      print "Iteration no. ", i }
</programlisting>

or to:

<programlisting>
      print "Entering a loop." for (i = 1;
            i &lt;= 5;
         i++)
                       {
      print "Iteration no. ",
      i }
</programlisting>

Obviously some layouts are more practical than others, but it is completely up to the user to decide which layout is most suitable.

</sect2>

<sect2>
<title> Interactive Mode </title>

<para>
Formatting rules become context-dependent when line-by-line processing is done. If found, PHOEBE will use the GNU readline library for line input. All line editing capabilities and history management are supported by this library. If the library is not installed, the scripter will support only the simplest line editing features.
</para>

<para>
Since the parser is insensitive to whitespaces (including newlines), the scripter will not evaluate the line until a statement is complete. This is done automatically by the lexical block: whenever a block start is encountered, the scripter scope increases by 1; whenever a block end is encountered, it decreases by 1. When it reaches 0, all input lines are concatenated and evaluated as a single statement. Consider the following example:

<programlisting>
  1   &gt; for (i=1; i&lt;=2; i++)
  2   PHOEBE scripter: syntax error
  3   &gt; for (i=1; i&lt;=2; i++) {
  4    1&gt; for (j=1; j&lt;=2; j++) {
  5    2&gt; print "This is scope 2"
  6    2&gt; }
  7    1&gt; print "This is scope 1"
  8    1&gt; }
  9     This is scope 2
 10     This is scope 2
 11     This is scope 1
 12     This is scope 2
 13     This is scope 2
 14     This is scope 1
 15   &gt; # Back in prompt
</programlisting>

We defer the explanation of the used directives to later sections. Numbers 1-15 on the left represent line numbers and are added for reference only, they are not part of the scripter output.
</para>

<para>
Right now we want to focus our attention to scoping. As you see, the first for entry (line 1) fails because the parser expects a block to supercede the read input. Since a line ends before the '{' delimeter is encountered, syntax error is reported (line 2).
</para>

<para>
The second for entry (line 3) is valid since a block delimeter '{' is encountered and the scope level is increased by 1. To facilitate the user's task of counting scopes, current scope level is printed in the prompt - note '1&gt;' and '2&gt;' in lines 4--8.
</para>

<para>
The third for entry (line 4) opens a new block and thus increases the scope level to 2. After the first print statement (line 5) is read, the inner block is closed (line 6) and the scope level is reduced to 1 (line 7).
</para>

<para>
Finally, by line 8 the scope level is reduced to 0. At that point, all statements from lines 3 to 8 will be concatenated into a single statement which will be parsed and evaluated.
</para>

<para>
Note that for system calls mentioned earlier (the ! escape character) the delimeter ! must be the first character in the line.
</para>

</sect2>
<sect2>
<title> Output Redirection </title>

Any output from PHOEBE scripter may be redirected in two ways: by shell redirection (sh, bash, csh etc.) or by internal PHOEBE redirection.

<sect3> <title> Shell Redirection </title>

By default, PHOEBE scripter uses stdout stream for output. stdout points to the terminal from which PHOEBE was started, but it may be changed with redirection operators '&gt;' and '&gt;' for writing and appending to an external file, respectively. Consider the following three examples:

<programlisting>
      phoebe_scripter -e example.script
</programlisting>

This command runs PHOEBE scripter in an automatic mode, where the script example.script will be executed and all output PHOEBE makes will be directed to the terminal.

<programlisting>
      phoebe_scripter -e example.script &gt; result.data
</programlisting>

The redirection operator '&gt;' is used to send all output PHOEBE makes to external file result.data. If the file exists, it will be overwritten without confirmation.

<programlisting>
      phoebe_scripter -e example.script &gt;&gt; result.data
</programlisting>

The redirection operator '&gt;&gt;' is also used to send all output to external file result.data, but this time appending it to the contents of that file. If the file doesn't exist, it is created.

</sect3>

<sect3><title> Internal Redirection </title>

Although redirecting the output using a shell is easy, it is often not quite what is needed: sometimes only parts of the output are relevant and should be output to external files; sometimes it is desireable to redirect different parts to multiple (distinct) external files. This is where internal redirection comes to play. It is similar to shell redirection, only the operators are slightly different: PHOEBE uses '-&gt;' and '-&gt;&gt;' for writing and appending, respectively. These operators are followed by a literal or a string identifier and may be used after statements, statements in blocks or blocks themselves. For example,

<programlisting>
      calc 1+2 -&gt; "result.txt"
</programlisting>

will create a new external file result.txt or overwrite it if it already exists. Next, a statement:

<programlisting>
      calc 3+4 -&gt;&gt; "result.txt"
</programlisting>

will append the result of the evaluation to result.txt, creating it if it doesn't exist. Both '-&gt;' and '-&gt;&gt;' may be grouped, i.e.:

<programlisting>
      {
      calc 1+2 -&gt;&gt; "result"
      calc 3+4 -&gt;&gt; "result"
      }
</programlisting>

would produce the same result as:

<programlisting>
      {
      calc 1+2
      calc 3+4
      } -&gt;&gt; "result"
</programlisting>
</sect3>
</sect2>

</sect1>

</chapter>
